/***
*
* 여기는 application을 만들기 위한 여러 라이브러리등 정보를 설정하는 페이지 입니다.
* 
* 화장실을 만드는 행위를 할때
* 단순히 그냥 딱 화장실 어떻게 만들어야지 계획뿐만아니라
* 구체적으로 필요한 재료나 드는 비용, 땅문서 뭐 인건비 협력회사 등 여러가지 정보가 필요하겠죠?
* 이페이지는 그것을 설정하는 페이지 입니다.
*
*
* plugin의 정의
* 여기서는 프로그래밍을 '건축' 행위라 생각하고 설명을 이어나가겠슴다.
* 건축을 하려면
* 어느 년도때 어느 나라 말을 이용하여(한국어,중국어,일본어)( 무슨 언어로 코딩 하실껀가요 c?Java?Kotlin)  
* 어떤 양식으로 짓게 시킬껀지 모로코양식? 로코코양식?(나는 스프링프레임워크를 쓸꺼야,나는 프레임워크를 쓸꺼야) 정하는 행위라고 편안하게 생각하시면 됨다.
* 
*/

plugins {
	id 'java'boot
	id 'org.springframework.' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.asciidoctor.convert' version '2.4.0'
}

/**
* 근데 제가 만든 화장실이 누가 만들었고
* 언제 만들었고 몇번의 시공이 있었는지 리모델링같은걸 했는지 정보가 있어야겠쥬?
* 아래 group과  version이 그것을 말하는 것입니다.
*/
group = 'kkkim.com'
version = '0.0.1-SNAPSHOT'
/**
  sourceCompatibility는
  저희가 정한 언어를 어느버전으로 사용할것인지 정하는 행위입니다.
  저희는 현대식 한글을 쓰는데 작성을 나라말쌈이~ 17세기 한글로 쓰면 이해를 못할수도 있잖아요
  여기서는 java 17을 이용하여 만든다라는 의미로 17로 지정하였슴다. 
   
*/

sourceCompatibility = '17'

/**
* 여기는 특정 정의를 정의하는 곳입니다.
* https://cantcoding.tistory.com/59
* 여기 참조하시면 좋겠슴다...
* 음 이것을 잘 설명하려면...
* compile의 개념을 알아야하는데
* https://medium.com/@js230023/%EC%BB%B4%ED%8C%8C%EC%9D%BC-compile-%EC%9D%B4%EB%9E%80-2d6120f2fb39
* 컴파일 개념은 기계어-> 사람언어입니다.
*
*
* compileOnly는  compile을 다시해야할때만 다시 확인하거나 불러와야하는 것들을 정의한것입니다.
* 저희가 건축과 관련된거를 정하는 관리자들은 한국인인데 사용하는 인부가 중국인이면 설계도를 다시 수정할때마다 그 수정내용을 번역할 통역사를 부르는 행위로 이해하시면 되겠슴다. 
*/
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

/**
 repository
 필요한 라이브러리를 어디서 다운로드 할것인지 정하는 부분입니다.
 필요한 협력회사들을 어디서 구할지 정한다고 생각하시면 됩니다.
 mavenCentral에서 라이브러리를 다운받을꺼에요= 나라장터에서 우리랑 같이 일할 협력사를 구할꺼에요.
*/
repositories {
	mavenCentral()
}

/**
 ext는 전역 변수를 선언하는 곳입니다.
 전역변수는 이 build.gradle의 모든 곳에서 사용되는 변수를 의미합니다.
 예를들어 저희가 이 건축하는 프로젝트를 '존슨이네 화장실'선언하고 모두가 알았으면 한다면
 ext안에
 set('프로젝트','존슨이네 화장실')을 하면 이제 
 재료를 사거나 통역을 하거나 무엇을 하든 이 프로젝트가 존슨이네 화장실임을 알게 됩니다.
*/
ext {

	set('snippetsDir', file("build/generated-snippets"))
}

/*
  이제 mavenCentral에서 다운받을 라이브러리를 지정하는 행위입니다.
  나라장터에서 어떤 기업들과 같이 일할건지 리스트를 짠거겠지요?
  그러면 앞에 붙는 implementation, runtimeOnly 등은 무엇일까요?
  그것은 어느단계때 이 애들을 불러올것인지 정하는 행위입니다.
  나중에 한번 찾아서 공부하는것도 좋슴다.
  runtimeOnly는 이 앱을 실행할때만 불러온다는 개념인데
  예를들자면 제가 존슨이네 화장실을 청소할 외주 청소 용역업체를 정하고 데리고 온다할때
  설계도를 작성할때부터 불러오는게 아니라 건축을 다 완성하고 영업개시할때 불러오는게 맞겠죠?
*/

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.session:spring-session-core'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework:spring-webflux'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

/**
 어떤 작업을 하라는 명령이 들어왔을때 어디서 무엇을 할것인지 지정하는 행위입니다.
 사실 저도 잘 몰?루?
*/
tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}
