import { createVNode as _createVNode } from "vue";
// Composables
import { useResizeObserver } from "../../composables/resizeObserver.mjs";
import { useToggleScope } from "../../composables/toggleScope.mjs"; // Utilities
import { defineComponent, useRender } from "../../util/index.mjs";
import { onUpdated, watch } from 'vue';
export const VVirtualScrollItem = defineComponent({
  name: 'VVirtualScrollItem',
  props: {
    dynamicHeight: Boolean
  },
  emits: {
    'update:height': height => true
  },
  setup(props, _ref) {
    let {
      emit,
      slots
    } = _ref;
    const {
      resizeRef,
      contentRect
    } = useResizeObserver();
    useToggleScope(() => props.dynamicHeight, () => {
      watch(() => {
        var _contentRect$value;
        return (_contentRect$value = contentRect.value) == null ? void 0 : _contentRect$value.height;
      }, height => {
        if (height != null) emit('update:height', height);
      });
    });
    function updateHeight() {
      if (props.dynamicHeight && contentRect.value) {
        emit('update:height', contentRect.value.height);
      }
    }
    onUpdated(updateHeight);
    useRender(() => {
      var _slots$default;
      return _createVNode("div", {
        "ref": props.dynamicHeight ? resizeRef : undefined,
        "class": "v-virtual-scroll__item"
      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]);
    });
  }
});
//# sourceMappingURL=VVirtualScrollItem.mjs.map